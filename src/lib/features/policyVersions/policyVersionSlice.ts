import { BaseQueryApi, createApi } from "@reduxjs/toolkit/query/react";
import { CreatablePolicy } from "@/app/models/creatablePolicy";
import { PolicyVersion } from "./policyVersion";

let fakePolicies: PolicyVersion[] = [
  {
    id: crypto.randomUUID(),
    title: "Last version (draft)",
    content: "This is the content of policy 1",
    isDraft: true,
    createdAt: new Date(25, 9, 2024),
  },
  {
    id: crypto.randomUUID(),
    title: "Version of Dec 2022",
    content: "This is the content of policy 2",
    isDraft: false,
    createdAt: new Date(1, 12, 2022),
  },
  {
    id: crypto.randomUUID(),
    title: "Version of Dec 2023",
    content: "This is the content of policy 3",
    isDraft: false,
    createdAt: new Date(1, 12, 2023),
  },
];

export const policyVersionApiSlice = createApi({
  reducerPath: "policyVersionApi",
  tagTypes: ["PolicyVersions"],
  endpoints: (build) => ({
    getPolicyVersions: build.query<PolicyVersion[], null>({
      queryFn: async () => {
        return { data: fakePolicies };
      },
      providesTags: (result) => result
        ? [
          ...result.map(({ id }) => ({
            type: "PolicyVersions" as const,
            id: id,
          })),
          { type: "PolicyVersions", id: "LIST" },
        ]
        : [{ type: "PolicyVersions", id: "LIST" }],
    }),

    createPolicy: build.mutation<PolicyVersion[], CreatablePolicy>({
      queryFn: async (creatablePolicy) => {
        const newPolicy = {
          id: crypto.randomUUID(), 
          createdAt: new Date(),
          title: creatablePolicy.title,
          isDraft: true,
          content: creatablePolicy.content
        } as PolicyVersion;

        const policies = [...fakePolicies];
        policies.push(newPolicy);
        fakePolicies = [...policies];
        return { data: fakePolicies };
      },
      invalidatesTags: [{ type: "PolicyVersions", id: "LIST" }],
    }),

    deletePolicy: build.mutation<PolicyVersion[], string>({
      queryFn: async (policyId) => {
        fakePolicies = fakePolicies.filter(
          (policy) => policy.id !== policyId
        );

        return { data: fakePolicies };
      },
      invalidatesTags: (result, error, policyId) => [
        { type: "PolicyVersions", id: policyId },
        { type: "PolicyVersions", id: "LIST" },
      ],
    }),
    resetPolicy: build.mutation<PolicyVersion[], unknown>({
      queryFn: async () => {
        fakePolicies = [];

        return { data: fakePolicies };
      },
      invalidatesTags: (result, error) => [
        { type: "PolicyVersions", id: "LIST" },
      ],
    }),
    approvePolicy: build.mutation<PolicyVersion[], string>({
      queryFn: async (policyId) => {
        const policy = fakePolicies.find(p => p.id == policyId);
        if(policy == null){
          return {error: 'not found'}
        }
        fakePolicies = fakePolicies.filter(
          (policy) => policy.id !== policyId
        );

        const policies = [...fakePolicies];
        policies.push({...policy, isDraft: false});
        fakePolicies = [...policies];

        return { data: fakePolicies };
      },
      invalidatesTags: (result, error, policyId) => [
        { type: "PolicyVersions", id: policyId },
        { type: "PolicyVersions", id: "LIST" },
      ],
    }),
  }),
  baseQuery: function (args: any, api: BaseQueryApi, extraOptions: {}): ({ error: unknown; data?: undefined; meta?: {} | undefined; } | { error?: undefined; data: unknown; meta?: {} | undefined; }) | PromiseLike<{ error: unknown; data?: undefined; meta?: {} | undefined; } | { error?: undefined; data: unknown; meta?: {} | undefined; }> {
    throw new Error("Function not implemented.");
  }
});

// Hooks are auto-generated by RTK-Query
export const {
  useGetPolicyVersionsQuery,
  useDeletePolicyMutation,
  useCreatePolicyMutation,
  useResetPolicyMutation,
  useApprovePolicyMutation,
} = policyVersionApiSlice;
